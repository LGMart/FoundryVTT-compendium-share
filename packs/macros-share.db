{"name":"Rage","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\r\n//\r\n//\r\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \r\n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \r\n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\r\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\r\n//\t\t\t\t\t\t\tFixed rage damage at level 8\r\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\r\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\r\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\r\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\r\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\r\n//\t\t\t\t\t\t\tFixed rage damage formula again...\r\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\r\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\r\n//\t\t\t\t\t\t4.\t(2020/06/04) \r\n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\r\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\r\n//\t\t\t\t\t\t5.\t(2020/06/10)\r\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \r\n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\r\n//\t\t\t\t\t\t\tEnhanced localization support\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\r\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\r\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\r\n//!!!\r\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\r\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \r\n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\r\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\r\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \r\n//!!!\t\t\tBear Totem Spirit resistances.\r\n//!!!\r\n//!!!\tBonus Tip 3: \t\tThrown Weapons\r\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\r\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\r\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\r\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\r\n//!!!\r\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\r\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\r\n//!!!\r\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\r\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst rageIconPath = 'icons/svg/explosion.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\r\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\r\n\r\n\t\t\tconst deductResource = true;\r\n\t\t\tconst preventNegativeResource = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\r\n//!!!\r\n\t\t\tconst strAttacks = true;\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\r\n\r\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\n\t\t\tconst toggleMacro = false;\r\n\r\n\t\t\t//To use a different icon, manually change the filepath here\r\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\r\n\r\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\n\t\t\tconst rageMacroName = 'Rage';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//declarations\r\nlet barb = '';\r\nlet chatMsg = '';\r\nlet bear = '';\r\nlet noRage = false;\r\nlet rageDmgAdded = false;\r\nlet toggleResult = false;\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\r\n//!!!\r\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\r\n\t\t\tconst barbClassName = 'Barbarian';\r\n\t\t\tconst rageResourceName = 'Rage';\r\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\r\n\r\n\t\t\t//All remaining values may be changed freely\r\n\r\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\r\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\r\n\t\t\tconst endRageMsg =  ' is no longer raging.';\r\n\r\n\t\t\t//error and warning messages\r\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\r\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\r\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\r\n\t\t\tconst errorSelectToken = 'Please select a token.';\r\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//main\r\n//check to see if Actor exists and is a barbarian\r\nif (macroActor !== undefined && macroActor !== null) {\r\n\r\n\t// get the barbarian class item\r\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\r\n\tif (barb == undefined) {\r\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\r\n\t}\r\n\tif (barb !== undefined && barb !== null) {\r\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\r\n\t\tlet enabled = false;\r\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\r\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\r\n\t\t\tenabled = true;\r\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\r\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\r\n\t\t\t\t\trageDmgAdded = true;\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Calculate rage value for use in damage reversion and application\r\n\t\t// Determining the barbarian level\r\n\t\tlet barblvl = barb.data.data.levels;\r\n\r\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\r\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\r\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\r\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\r\n\r\n\t\t// if rage is active, disable it\r\n\t\tif (enabled) {\r\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\r\n\t\t\t// reset resistances and melee weapon attack bonus\r\n\t\t\tlet obj = {};\r\n\t\t\tobj['flags.rageMacro'] = null;\r\n\t\t\t//revert damage resistances\r\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\r\n\r\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\r\n\t\t\t//eventually want to add support so only last instance found is replaced.\r\n\t\t\tif(rageDmgAdded) {\r\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\r\n\t\t\t\t\tconsole.log('Removing simple rage damage');\r\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Removing complex rage damage');\r\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\r\n\t\t\t\t\tlet result = dmg.search(patt);\r\n\t\t\t\t\tif (result !== -1) {\r\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\r\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\r\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\r\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\r\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\r\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmacroActor.update(obj);\r\n\r\n\t\t// if rage is disabled, enable it\r\n\t\t} else {\r\n\t\t\tif (deductResource) {\r\n\t\t\t\tlet hasAvailableResource = false;\r\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\r\n\t\t\t\tlet obj = {}\r\n\t\t\t\t// Look for Resources under the Core macroActor data\r\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\r\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\r\n\t\t\t\t\thasAvailableResource = true;\r\n\t\t\t\t\tnewResources[resourceKey].value--;\r\n\t\t\t\t\tobj['data.resources'] = newResources \r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif (!hasAvailableResource) {\r\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\r\n\t\t\t\t\tnoRage=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\r\n\t\t\tif (!noRage) {\r\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\r\n\t\t\t\t// update resistance\r\n\t\t\t\tlet obj = {};\r\n\t\t\t\t// storing old resistances in flags to restore later\r\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\r\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\r\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\r\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\r\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\r\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\r\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\r\n\t\t\t\t//If bear totem, add bear totem resistances.\r\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\r\n\t\t\t\tif (bear !== undefined && bear!== null) {\r\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\r\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\r\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\r\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\r\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\r\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\r\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\r\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\r\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\r\n\t\t\t\t}\r\n\t\t\t\tobj['data.traits.dr'] = newResistance;\r\n\t\t\t\tmacroActor.update(obj);\r\n\r\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\r\n\t\t\t\tif (strAttacks) {\r\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\r\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\r\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\r\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\r\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\r\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\r\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmacroActor.update(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!noRage) {\r\n\t\t\t// toggle rage icon, if rage path is defined above\r\n\t\t\t(async () => { \r\n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\r\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \r\n\t\t\t})();\r\n\t\t\t\r\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\r\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\r\n\t\t\t\t//check for name of macro in its \"off\" form\r\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\r\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\r\n\t\t\t\t}\r\n\t\t\tlet obj = {};\r\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \r\n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\r\n\t\t\t\tif (enabled) {\r\n\t\t\t\t  obj['img'] = rageIconPath;\r\n\t\t\t\t  obj['name'] = rageMacroName;\r\n\t\t\t\t} else {\r\n\t\t\t\t  obj['img'] = stopRageIconPath;\r\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\r\n\t\t\t\t}\r\n\t\t\t\trageMacro.update(obj);\r\n\t\t\t} else {\r\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else ui.notifications.warn(errorSelectToken);\r\n// write to chat if needed:\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/skills/yellow_17.jpg","actorIds":[],"_id":"0bjrAdVym6BzJh1S"}
{"name":"Sneak Attack","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\r\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\r\n//\r\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \r\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \r\n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\r\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\r\n//!!!\r\nconst sneakIconPath = 'icons/svg/mystery-man-black.svg';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\r\n\r\n\t\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\r\n\t\t\t\tconst toggleMacro = false;\r\n\r\n\t\t\t\t//To use a different icon, manually change the filepath here\r\n\t\t\t\tconst stopSneakIconPath = 'icons/svg/cowled.svg';\r\n\r\n\t\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\r\n\t\t\t\tconst sneakMacroName = 'Sneak Attack';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\nlet toggleResult = false;\r\nlet enabled = false;\r\nlet errorReason = '';\r\nlet sneakAttack = {};\r\nlet rogue = {};\r\nlet rogueLvls = 0;\r\nlet sneakDice = 0;\r\nlet chatMsg = '';\r\nlet oldMDmg = '';\r\nlet oldRDmg = '';\r\n\r\nlet macroActor = actor;\r\nlet macroToken = token;\r\n\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\r\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\r\n\r\n\t\t\t\tconst rogueClassName = 'Rogue';\r\n\t\t\t\tconst sneakAttackFeatureName = 'Sneak Attack';\r\n\r\n\t\t\t\tconst errorSelectRogue = 'Please select a single rogue token.';\r\n\t\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\r\n\t\t\t\tconst errorSelectToken = 'Please select a token.';\r\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n//check to ensure token is selected and attempt to define the sneak attack feature\r\nif (macroActor !== null && macroActor !== undefined) {\r\n\tsneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\r\n} else {\r\nerrorReason = `${errorSelectToken}`;\r\n}\r\n\r\n//check to ensure token is a rogue\r\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\r\n\trogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\r\n} else {\r\n\terrorReason = `${errorSelectRogue}`;\r\n}\r\n\r\nconsole.log(`Error reason is: ${errorReason}`);\r\n//main execution now that errors are caught\r\n\r\nif (errorReason == '') {\r\n\t\r\n\tchatMsg = '';\r\n\tlet enabled = false;\r\n\t// store the state of the sneak attack toggle in flags\r\n\tif (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\r\n\t\tenabled = true;\r\n\t}\r\n\t\r\n\t// if sneak attack is active, disable it\r\n\tif (enabled) {\r\n\t\tchatMsg = `${macroActor.name} is no longer sneak attacking.`;\r\n\t\t// ranged and melee weapon attack bonus\r\n\t\tlet obj = {};\r\n\t\tobj['flags.sneakMacro'] = null;\t\t\r\n\t\tobj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\t\t\t\r\n\t\tobj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\t\r\n\t\tmacroActor.update(obj);\r\n\t\t\r\n\t// if sneak attack is disabled, enable it\r\n\t} else {\t\t\r\n\t\tchatMsg = `${macroActor.name} starts sneak attacking!`;\r\n\t\t\r\n\t\tlet obj = {};\r\n\t\tobj['flags.sneakMacro.enabled'] = true;\r\n\r\n\t\t// Preserve old mwak damage bonus if there was one\r\n\t\tlet oldMDmg = macroActor.data.data.bonuses.mwak.damage;\r\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\r\n\t\tobj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\r\n\r\n\t\t// Preserve old rwak damage bonus if there was one\r\n\t\tlet oldRDmg = macroActor.data.data.bonuses.rwak.damage;\r\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\r\n\t\tobj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\r\n\r\n\t\t\r\n\t\t// Determining the rogue level\r\n\t\trogueLvls = rogue.data.data.levels;\r\n\r\n\t\t// Formula to determine the sneak attack damage depending on rogue level\t\r\n\t\tsneakDice = Math.ceil(rogueLvls/2);\r\n\t\r\n\t\t//actually add the bonus sneak attack damage to the previous bonus damage\r\n\t\t//respect roll formulas if present.\r\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\r\n\t\t\tobj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\r\n\t\t} else {\r\n\t\t\tobj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\r\n\t\t}\r\n\r\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\r\n\t\t\tobj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\r\n\t\t} else {\r\n\t\t\tobj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\r\n\t\t}\t\r\n\r\n\t\tmacroActor.update(obj);\r\n\r\n\t}\t\r\n\t\r\n\t//mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\r\n\t(async () => { \r\n\t\ttoggleResult = await macroToken.toggleEffect(sneakIconPath);\r\n\t\tif (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);  \r\n\t})();\r\n\r\n\t//toggle macro icon and name, if enabled\r\n\tif (toggleMacro) {\r\n//\t\tNorc's preferred icons, not sure if publicly available\r\n//\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\r\n//\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\r\n\t\tlet sneakMacro = game.macros.getName(sneakMacroName);\r\n\t\t\t//Also check for name of macro in its \"off\" form\r\n\t\t\tif (sneakMacro == null || sneakMacro == undefined) {\r\n\t\t\t\tsneakMacro = game.macros.getName('Stop ' + sneakMacroName);\r\n\t\t\t}\r\n\t\tlet obj = {};\r\n\t\tif ( (sneakMacro !== null && sneakMacro !== undefined) && \r\n\t\t\t\t+ (stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '') ) {\r\n\t\t\tif (enabled) {\r\n\t\t\tobj['img'] = sneakIconPath;\r\n\t\t\tobj['name'] = sneakMacroName;\r\n\t\t\t} else {\r\n\t\t\tobj['img'] = stopSneakIconPath;\r\n\t\t\tobj['name'] = 'Stop ' + sneakMacroName;\r\n\t\t\t}\r\n\t\t\tsneakMacro.update(obj);\r\n\t\t} else {\r\n\t\tui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n} else {\r\nui.notifications.error(`${errorReason}`);\t\r\n}\r\nif (chatMsg !== '') {\r\n\tlet chatData = {\r\n\t\tuser: game.user._id,\r\n\t\tspeaker: ChatMessage.getSpeaker(),\r\n\t\tcontent: chatMsg\r\n\t};\r\n\tChatMessage.create(chatData, {});\r\n}","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/skills/arrow_15.jpg","actorIds":[],"_id":"5uIRNdLsdLVX6woV"}
{"name":"Divine Smite","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\r\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\r\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\r\n * will also increase the number of damage dice.\r\n * \r\n * First, select a token to perform the smite, then target an enemy to be smitten. Make your regular \r\n * attack and then if you choose to use Divine Smite, run this macro.\r\n */\r\n\r\nlet confirmed = false;\r\n\r\n// Create a dialogue box to select spell slot level to use when smiting.\r\nnew Dialog({\r\n    title: \"Divine Smite Damage\",\r\n    content: `\r\n     <p>Spell Slot level to use Divine Smite with.</p>\r\n     <form>\r\n      <div class=\"form-group\">\r\n       <label>Spell Slot Level:</label>\r\n       <select id=\"slot-level\" name=\"slot-level\">\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n       </select>\r\n      </div>\r\n     </form>\r\n     `,\r\n    buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"SMITE!\",\r\n            callback: () => confirmed = true\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancel\",\r\n            callback: () => confirmed = false\r\n        }\r\n    },\r\n    default: \"Cancel\",\r\n    close: html => {\r\n        if (confirmed) {\r\n            let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\r\n            smite(slotLevel);\r\n        }\r\n    }\r\n}).render(true);\r\n\r\n/**\r\n * Gives the spell slot information for a particular actor and spell slot level.\r\n * @param {Actor5e} actor - the actor to get slot information from.\r\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\r\n * @returns {object} contains value (number of slots remaining), max, and override.\r\n */\r\nfunction getSpellSlots(actor, level) {\r\n    let spells = actor.data.data.spells;\r\n    switch (level) {\r\n        case 1:\r\n            return spells.spell1;\r\n        case 2:\r\n            return spells.spell2;\r\n        case 3:\r\n            return spells.spell3;\r\n        case 4:\r\n            return spells.spell4;\r\n        case 5:\r\n            return spells.spell5;\r\n    }\r\n}\r\n\r\n/**\r\n * Use the controlled token to smite the targeted token.\r\n * @param {integer} slotLevel - the spell slot level to use when smiting.\r\n */\r\nfunction smite(slotLevel) {\r\n    let targets = game.user.targets;\r\n    let suseptible = [\"fiend\", \"undead\"];\r\n    let controlledActor = canvas.tokens.controlled[0].actor;\r\n    let chosenSpellSlots = getSpellSlots(controlledActor, slotLevel);\r\n\r\n    if (chosenSpellSlots.value < 1) {\r\n        ui.notifications.error(\"No spell slots of the required level available.\");\r\n        return;\r\n    }\r\n    if (targets.size !== 1) {\r\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\r\n        return;\r\n    }\r\n\r\n    targets.forEach(target => {\r\n        let numDice = slotLevel + 1;\r\n        let type = target.actor.data.data.details.type.toLocaleLowerCase();\r\n        if (suseptible.includes(type)) numDice += 1;\r\n        new Roll(`${numDice}d8`).roll().toMessage({ flavor: \"Macro Divine Smite - Damage Roll (Radiant)\", speaker })\r\n    })\r\n\r\n    chosenSpellSlots.value -= 1;\r\n}","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/skills/emerald_01.jpg","actorIds":[],"_id":"8lOBhemVE3kJVhEK"}
{"name":"TokenVision","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">Sem Mudança</option>\r\n          <option value=\"dim0\">Self (5ft)</option>\r\n          <option value=\"dim30\">Darkvision (30ft)</option>\r\n          <option value=\"dim60\">Darkvision (60ft)</option>\r\n          <option value=\"dim90\">Darkvision (90ft)</option>\r\n          <option value=\"dim120\">Darkvision (120ft)</option>\r\n          <option value=\"dim150\">Darkvision (150ft)</option>\r\n          <option value=\"dim180\">Darkvision (180ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">Sem Mudança</option>\r\n          <option value=\"none\">Nada</option>\r\n          <option value=\"candle\">Vela</option>\r\n          <option value=\"lamp\">Lampada</option>\r\n          <option value=\"bullseye\">Lanterna (Furta-Fogo)</option>\r\n          <option value=\"hooded-dim\">Lanterna Coberta (Fechada)</option>\r\n          <option value=\"hooded-bright\">Lanterna Coberta (Aberta)</option>\r\n          <option value=\"light\">Luz (Cantrip)</option>\r\n          <option value=\"torch\">Tocha</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 5;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/items/inventory/lantern.jpg","actorIds":[],"_id":"9GG10FkTKnRcPwVR"}
{"name":"Bleeding Gate","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dsIPwQQyWeDUQAkJ"}},"scope":"global","command":"let imagePopup = (imageUrl) => {\n\t\t// Display the image popout and share it.\n\t\tconst ip = new ImagePopout(imageUrl);\n\t\tip.render(true);\n\t\tip.shareImage();\n\t};\n\n\tlet selectOptions = game.user.isGM ? `\n\t<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\n\t\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\n\t\t<select id=\"output-options\" />\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Theema-AgaRith.jpg\">1-Theema AgaRith</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/snake.jpg\">1-Talking Snake</option>\n\t\t\t<option value=\"https://i.pinimg.com/originals/d0/ce/b1/d0ceb103424a37b36ef58e0501cea6b3.jpg\">1-Cave Entrance</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Paragon.jpg\">1-Paragon</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Ersu.jpg\">1-Ersu</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Peachsmith-logo.jpg\">1-Peachsmith logo</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Chief-wahtsey.jpg\">1-Chief Wahtsey</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/peacestone.jpg\">1-Peacestone</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/peacestone-mosaic.jpg\">1-Peacestone and Mosaic</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/mosaic-cap.jpg\">1-Mosaic Cap</option>\n\t\t\t<option value=\"MEDIA/HandOuts/lava-flow.jpg\">1-Tortured Lands</option>\n\t\t\t<option value=\"MEDIA/HandOuts/sewers.jpg\">2-Sewer</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Takwen.jpg\">2-Takwen</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/Raan.jpg\">2-Raan</option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"worlds/oneshot/handouts/bleeding-gate/\"></option>\n\t\t\t<option value=\"\"></option>\n\t\t\t<option value=\"\"></option>\n\t\t</select>\n\t</div>\n\t<br />\n\t` : '';\n\n\tnew Dialog({\n\t\ttitle: `Share Image via URL`,\n\t\tcontent: `\n\t\t\t<form>\n\t\t\t\t${selectOptions}\n\t\t\t</form>\n\t\t`,\n\t\tbuttons: {\n\t\t\tyes: {\n\t\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\t\tlabel: `Share`,\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet handout = html.find('select#output-options')[0]?.value || null;\n\t\t\t\t\tlet imageUrl = handout;\n\t\t\t\t\timagePopup(imageUrl);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tdefault: \"yes\"\n\t}).render(true)","author":"sjKRDGo0jjcivYTL","img":"worlds/oneshot/handouts/bleeding-gate/Saultrophine.jpg","actorIds":[],"_id":"CEhwt9j0p1Nwnnkd"}
{"name":"Token Tips","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.niVFYOeOwoiRUwEs"}},"scope":"global","command":"// Get token from scene by name\r\nlet token = canvas.scene.data.tokens.find(token => token.name = 'My Actor')\r\n\r\n// Get first controlled token\r\nlet token = canvas.tokens.controlled[0];\r\n\r\n// Get all controlled tokens and do something with each\r\nlet tokens = canvas.tokens.controlled;\r\ntokens.forEach(token => {\r\n  console.log(token.name);\r\n});\r\n\r\n// Distance between 2 tokens\r\nlet d = canvas.grid.measureDistance(token1, token2);\r\n\r\n// Select one random token from amongst all selected\r\nlet tks = canvas.tokens.controlled;\r\nlet r = Math.floor(Math.random()*tks.length);\r\ncanvas.tokens.selectObjects(tks[r]);\r\n\r\n/*\r\n * Add token to scene\r\n * Options override (actor.data.token) or set properties\r\n */\r\nlet options = { x: 0, y: 0 };\r\ncanvas.tokens.dropActor(actor, options);\r\n\r\n/*\r\n * Add multiple tokens to scene\r\n */\r\nlet actor1 = game.actors.getName('Steve');\r\nlet token1 = duplicate(actor1.data.token);\r\nlet actor2 = game.actors.getName('Stella');\r\nlet token2 = duplicate(actor2.data.token);\r\ncanvas.tokens.createMany([ token1, token2 ]);\r\n\r\n// Select all tokens in scene\r\nlet tokens = canvas.tokens.placeables;\r\ncanvas.tokens.selectObjects(tokens)\r\n\r\n// Select token by name\r\nlet token = canvas.tokens.placeables.find(t => t.name === 'Azimuth');\r\ntoken.control();\r\n\r\n// Select all NPC tokens\r\ncanvas.tokens.selectObjects(); // Drop existing selection\r\nlet tokens = canvas.tokens.placeables.filter(t => !t.actor.isPC); // Find NPCs\r\ntokens.forEach(t => { t.control({ releaseOthers: false }); }); // Select them","author":"sjKRDGo0jjcivYTL","img":"icons/svg/aura.svg","actorIds":[],"_id":"HKtd4jTuwNhcaGvQ"}
{"name":"FolderPerm","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Provides a prompt to set global permissions to all items within a folder.\r\n// Prompts the user for the folder name (case sensitive) and the permission level.\r\n\r\nconst form = `\r\n  <div style=\"display: inline-block; width: 100px\">Folder:</div>\r\n  <input type=\"string\" id=\"folderName\">\r\n  <br />\r\n  <div style=\"display: inline-block; width: 100px\">Permission:</div>\r\n  <select id=\"desiredPermission\" />\r\n    <option value=\"0\">None</option>\r\n    <option value=\"1\">Limited</option>\r\n    <option value=\"2\">Observer</option>\r\n    <option value=\"3\">Owner</option>\r\n  </select>\r\n  <br />\r\n  <label>\r\n  \t<input type=\"checkbox\" id=\"recurse\" checked/>\r\n    Recurse into subfolders\r\n\t</label>\r\n`;\r\n\r\nconst dialog = new Dialog({\r\n  title: \"Set desired permission\",\r\n  content: form,\r\n  buttons: {\r\n    use: {\r\n      label: \"Apply permissions\",\r\n      callback: applyPermissions\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction applyPermissions(html) {\r\n  const folderName = html.find(`input#folderName`)[0].value;\r\n  const permission = html.find(`select#desiredPermission`)[0].value;\r\n  const recurse = html.find(`input#recurse`)[0].checked;\r\n  \r\n  const folders = game.folders.filter(f => f.name === folderName);\r\n  if (folders.length === 0) {\r\n    ui.notifications.error(`Your world does not have any folders named '${folderName}'.`);\r\n  }\r\n  else if(folders.length > 1) {\r\n   ui.notifications.error(`Your world has more than one folder named ${folderName}`) \r\n  }\r\n  else {\r\n    repermission(folders[0], permission, recurse);\r\n    ui.notifications.notify(`Desired permissions were set successfully for  '${folderName}'.`);\r\n  }\r\n}\r\n\r\nfunction repermission(currentFolder, desiredPermission, recurse) {\r\n  console.debug(\"Repermissioning: \", currentFolder.name);\r\n  \r\n  if (currentFolder.content) {\r\n    currentFolder.content.map(item => {\r\n      let newPermissions = duplicate(item.data.permission);\r\n      newPermissions.default = desiredPermission;\r\n      console.debug(\"  Item:\", item.data.name);\r\n      item.update({ permission: newPermissions });\r\n    });\r\n  }\r\n\r\n  if (currentFolder.children && recurse) {\r\n    currentFolder.children.map(({ data }) => {\r\n      repermission(\r\n        game.folders.entities.filter(f => f.data._id == data._id)[0],\r\n        desiredPermission,\r\n        recurse);\r\n    });\r\n  }\r\n}","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/items/inventory/book-diary.jpg","actorIds":[],"_id":"Jbpfu04jRHSYY0nh"}
{"name":"Play Sound","permission":{"default":0,"FvzFxcGnQxOsBtv8":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.kFv4ywfe1DQQvrh4"}},"scope":"global","command":"/** Play a sound from a URL\n * Author: LGMart */\n\nnew Dialog({\n\ttitle: `Play Sound via URL`,\n\tcontent: `\n\t\t<form>\n\t\t\t<div style=\"display: flex; width: 100%; margin-bottom: 10px\">\n\t\t\t\t<label for=\"sound-url\" style=\"white-space: nowrap; margin-right: 10px; padding-top:4px\">URL:</label>\n\t\t\t\t<input type=\"text\" id=\"sound-url\" name=\"sound-url\" />\n\t\t\t</div>\n\t\t</form>\n\t`,\n\tbuttons: {\n\t\tyes: {\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\tlabel: `Play`,\n\t\t\tcallback: (html) => {\n\t\t\t\tlet SoundUrl = html.find('#sound-url').val();\n\t\t\t\tlet permission = html.find('select#output-options')[0]?.value || null;\n\t\t\t\tif (!SoundUrl) {\n\t\t\t\t\treturn ui.notifications.info(\"Sound do not exist in URL.\");\n\t\t\t\t}\n\t\t\t\tif (game.user.isGM) {\n\t\t\t\t\tAudioHelper.play({src: SoundUrl, volume: 1.0, autoplay: true, loop: false}, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tno: {\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\n\t\t\tlabel: `Cancel`\n\t\t},\n\t},\n\tdefault: \"yes\"\n}).render(true)","author":"FvzFxcGnQxOsBtv8","img":"icons/svg/sound.svg","actorIds":[],"_id":"P3jq8zpSvXBn2LFx"}
{"name":"Second Wind (5E Fighter)","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"//With your fighter token selected, click this macro to regain your second wind.\r\n//Questions? Ask in #macro-polo on Discord. If absolutely needed, please ping Norc#5108.\r\n\r\n//TO DO:    Add option to check for available Second Wind uses and automatcally expend one.\r\n//          Add additional option to fail usage if no uses left.\r\n\r\nfunction modifyHP(token, amount) {\r\n    //Known minor limitation: Does not take into account temp HP AT ALL.\r\n    let hp_cur = token.actor.data.data.attributes.hp.value;\r\n    let hp_max = token.actor.data.data.attributes.hp.max;\r\n    let hp_min = token.actor.data.data.attributes.hp.min;\r\n    hp_cur = (hp_cur+amount > hp_max) ? hp_max : hp_cur+amount;\r\n    hp_cur = (hp_cur < hp_min) ? hp_min : hp_cur;\r\n    token.actor.update({'data.attributes.hp.value': parseInt(hp_cur)});\r\n    return hp_cur;\r\n  }\r\n\r\nif(token) {\r\n    let fighter = actor.items.find(i => i.name == \"Fighter\");\r\n    if (fighter)  {\r\n        let fighterLevel = parseInt(fighter.data.data.levels);\r\n        let formula = `1d10 + ${fighterLevel}`;\r\n        console.log(formula);\r\n        let amount = new Roll(formula).roll().total; \r\n        //Note: Just change the number after the comma to heal/receive other HP values. Negative numbers indicate damage.\r\n        modifyHP(token, amount);\r\n    } else {\r\n        ui.notifications.notify(\"Please select a token that has at least one Fighter level.\");\r\n    } \r\n} else {\r\n    ui.notifications.notify(\"Please select a token.\");\r\n}","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/skills/blood_04.jpg","actorIds":[],"_id":"UCnFZ0s40xMIVvRP"}
{"name":"Raven Queen - HandOuts","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.58hfrNNvpj98iqDg"}},"scope":"global","command":"let imagePopup = (imageUrl) => {\n\t\t// Display the image popout and share it.\n\t\tconst ip = new ImagePopout(imageUrl);\n\t\tip.render(true);\n\t\tip.shareImage();\n\t};\n\n\tlet selectOptions = game.user.isGM ? `\n\t<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\n\t\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\n\t\t<select id=\"output-options\" />\n\t\t\t<option value=\"MEDIA/HandOuts/Dripping_Leaves3.jpg\">Dripping Leaves</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/Moon_Elf_male.jpg\">Moon Elves</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/Moon_Elf_female.jpg\">Starsinger Alyndra Eiltris</option>\t\t\t\t\n\t\t\t<option value=\"MEDIA/HandOuts/Torre-floresta-rio.jpg\">White Tower</option>\n\t\t\t<option value=\"MEDIA/HandOuts/forest-cave.jpg\">Outpost Entrance</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Monsters/Armanite.jpg\">Armanite</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/drow-male.jpg\">Renix T'will</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/drow-priestess-female.jpg\">Uvella</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/shadar-kai-male2.jpg\">Batern Alloit</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Shadowfell1.jpg\">Shadowfell 1</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Shadowfell2.jpg\">Shadowfell 2</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Shadowfell-clock-crows.jpg\">Shadowfell 3</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Shadowfell-shadar-kai.jpg\">Shadar-kai</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/shadar-kai-girl.jpg\">Shadar-kai Girl</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Personagens/Markella.jpg\">Markella</option>\n\t\t\t<option value=\"MEDIA/HandOuts/MEDIA/HandOuts/Monsters/Ennuisis.jpg\">Ennuisis</option>\n\t\t\t<option value=\"MEDIA/HandOuts/\"></option>\n\t\t\t<option value=\"MEDIA/HandOuts/\"></option>\n\t\t\t<option value=\"MEDIA/HandOuts/Itens/Conspirators_Visage.jpg\">Conspirators Visage</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Monsters/Vecnan-Cultists.jpg\"><Vecnan Cultists/option>\n\t\t\t<option value=\"MEDIA/HandOuts/Monsters/llip.jpg\">Allip</option>\n\t\t\t<option value=\"MEDIA/HandOuts/Monsters/Deathlock.jpg\">Deathlock</option>\n\t\t\t<option value=\"MEDIA/HandOuts/\"></option>\n\t\t\t<option value=\"MEDIA/HandOuts/Skull_lord.jpg\">Goriliath</option>\n\t\t</select>\n\t</div>\n\t<br />\n\t` : '';\n\n\tnew Dialog({\n\t\ttitle: `Share Image via URL`,\n\t\tcontent: `\n\t\t\t<form>\n\t\t\t\t${selectOptions}\n\t\t\t</form>\n\t\t`,\n\t\tbuttons: {\n\t\t\tyes: {\n\t\t\t\ticon: \"<i class='fas fa-check'></i>\",\n\t\t\t\tlabel: `Share`,\n\t\t\t\tcallback: (html) => {\n\t//\t\t\t\tlet handout = html.find('#image-url').val();\n\t\t\t\t\tlet handout = html.find('select#output-options')[0]?.value || null;\n\t\t\t\t\t//let path = 'MEDIA/SKT/History/';\n\t\t\t\t\t//let imageUrl = path + handout;\n\t\t\t\t\tlet imageUrl = handout;\n\t\t\t\t\timagePopup(imageUrl);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tdefault: \"yes\"\n\t}).render(true)","author":"sjKRDGo0jjcivYTL","img":"systems/dnd5e/icons/skills/violet_18.jpg","actorIds":[],"_id":"WMDxmBZ9sgwbXMvi"}
{"name":"SetBar","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.XZa2NAhrdz6sW2Pi"}},"scope":"global","command":"// Update all tokens on the map so that the name shows on hover and the bars always show.\n// Display Modes: ALWAYS, CONTROL, HOVER, NONE, OWNER, OWNER_HOVER\n\nconst tokens = canvas.tokens.placeables.map(token => {\n  return {\n    _id: token.id,\n    \"bar1.attribute\": \"attributes.hp\",\n    \"bar2.attribute\": \"None\",\n    \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n    \"displayBars\": CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\n  };\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"sjKRDGo0jjcivYTL","img":"icons/svg/wall-direction.svg","actorIds":[],"_id":"abDnuSFxZtrWcxJS"}
{"name":"ShareImg","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"/**\r\n * Share an image to all players when you have an image URL\r\n * Author: @Krishmero#1792\r\n */\r\n\r\nlet imagePopup = (imageUrl) => {\r\n\t// Display the image popout and share it.\r\n\tconst ip = new ImagePopout(imageUrl);\r\n\tip.render(true);\r\n\tip.shareImage();\r\n};\r\n\r\nlet chatDialog = (imageUrl) => {\r\n\tChatMessage.create({\r\n\t\tuser: game.user._id,\r\n\t\tcontent: `<img src=\"${imageUrl}\" />`,\r\n\t\ttype: CONST.CHAT_MESSAGE_TYPES.OOC\r\n\t});\r\n};\r\n\r\nlet selectOptions = game.user.isGM ? `\r\n<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\r\n\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\r\n\t<select id=\"output-options\" />\r\n\t\t<option value=\"popup\">Popup</option>\r\n\t\t<option value=\"chat\">Chat</option>\r\n\t\t<option value=\"both\">Both</option>\r\n\t</select>\r\n</div>\r\n<br />\r\n` : '';\r\n\r\nnew Dialog({\r\n\ttitle: `Share Image via URL`,\r\n\tcontent: `\r\n\t\t<form>\r\n\t\t\t${selectOptions}\r\n\t\t\t<div style=\"display: flex; width: 100%; margin-bottom: 10px\">\r\n\t\t\t\t<label for=\"image-url\" style=\"white-space: nowrap; margin-right: 10px; padding-top:4px\">Image URL:</label>\r\n\t\t\t\t<input type=\"text\" id=\"image-url\" name=\"image-url\" />\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t`,\r\n\tbuttons: {\r\n\t\tyes: {\r\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\r\n\t\t\tlabel: `Share`,\r\n\t\t\tcallback: (html) => {\r\n\t\t\t\tlet imageUrl = html.find('#image-url').val();\r\n\t\t\t\tlet permission = html.find('select#output-options')[0]?.value || null;\r\n\t\t\t\tif (!imageUrl) {\r\n\t\t\t\t\treturn ui.notifications.info(\"You did not provide a valid image.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (game.user.isGM && ['popup', 'both'].includes(permission)) {\r\n\t\t\t\t\timagePopup(imageUrl);\r\n\t\t\t\t}\r\n\t\t\t\tif (!game.user.isGM || ['chat', 'both'].includes(permission)) {\r\n\t\t\t\t\tchatDialog(imageUrl);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tno: {\r\n\t\t\ticon: \"<i class='fas fa-times'></i>\",\r\n\t\t\tlabel: `Cancel`\r\n\t\t},\r\n\t},\r\n\tdefault: \"yes\"\r\n}).render(true)","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/items/inventory/map-treasure.jpg","actorIds":[],"_id":"bSpioGfhaQyMjqbS"}
{"name":"HandOuts","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.pSdy0ikn15d3ejoM"}},"scope":"global","command":"let imagePopup = (imageUrl) => {\r\n\t// Display the image popout and share it.\r\n\tconst ip = new ImagePopout(imageUrl);\r\n\tip.render(true);\r\n\tip.shareImage();\r\n};\r\n\r\nlet selectOptions = game.user.isGM ? `\r\n<div style=\"display: inline-block; width: 100%; margin-bottom: 10px\">\r\n\t<label for=\"output-options\" style=\"margin-right: 10px\">Output Options:</label>\r\n\t<select id=\"output-options\" />\r\n\t\t<option value=\"Abeir-Toril.jpg\">Abeir-Toril</option>\r\n\t\t<option value=\"Annam.jpg\">Annam</option>\r\n\t\t<option value=\"Giants.jpg\">Giants</option>\r\n\t\t<option value=\"Ostoria1.jpg\">Ostoria 1</option>\r\n\t\t<option value=\"Ostoria2.jpg\">Ostoria 2</option>\r\n\t\t<option value=\"Ostoria3.jpg\">Ostoria 3</option>\r\n\t\t<option value=\"Tearfall.jpg\">Tearfall</option>\r\n\t\t<option value=\"GiantXDragon1.jpg\">GiantXDragon1</option>\r\n\t\t<option value=\"GiantXDragon2.jpg\">GiantXDragon2</option>\r\n\t\t<option value=\"Vonindod.jpg\">Vonindod</option>\r\n\t\t<option value=\"GiantXDragon3.jpg\">GiantXDragon3</option>\r\n\t\t<option value=\"Wah-ree.png\">Wah-ree</option>\r\n\t\t<option value=\"Ruinas1.jpg\">Ruinas1</option>\r\n\t\t<option value=\"Snowy_Ruins.gif\">Snowy Ruins </option>\r\n\t\t<option value=\"gigante_morto.jpeg\">Gigante Morto</option>\r\n\t\t<option value=\"Fire_cave.jpg\">Fire cave</option>\r\n\t\t<option value=\"castle-in-the-sky.jpg\">Castelo Nuvem</option>\r\n\t\t<option value=\"broken_ordering.jpg\">Ordenamento Quebrado</option>\r\n\t\t<option value=\"worshipers.jpg\">Worshipers</option>\r\n\t</select>\r\n</div>\r\n<br />\r\n` : '';\r\n\r\nnew Dialog({\r\n\ttitle: `Share Image via URL`,\r\n\tcontent: `\r\n\t\t<form>\r\n\t\t\t${selectOptions}\r\n\t\t</form>\r\n\t`,\r\n\tbuttons: {\r\n\t\tyes: {\r\n\t\t\ticon: \"<i class='fas fa-check'></i>\",\r\n\t\t\tlabel: `Share`,\r\n\t\t\tcallback: (html) => {\r\n//\t\t\t\tlet handout = html.find('#image-url').val();\r\n\t\t\t\tlet handout = html.find('select#output-options')[0]?.value || null;\r\n\t\t\t\tlet path = 'MEDIA/SKT/History/';\r\n\t\t\t\tlet imageUrl = path + handout;\r\n\t\t\t\timagePopup(imageUrl);\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tdefault: \"yes\"\r\n}).render(true)","author":"sjKRDGo0jjcivYTL","img":"MEDIA/PICs/Pergaminho.png","actorIds":[],"_id":"vGhMnRPpjwAYi82P"}
{"name":"Stealth","permission":{"default":0,"0zbqaPRKVgwkfgiZ":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\r\n\r\n// getting all actors of selected tokens\r\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\r\n\r\n// if there are no selected tokens, roll for the player's character.\r\nif (actors.length < 1) {\r\n  actors = game.users.entities.map(entity => {\r\n    if (entity.active && entity.character !== null) {\r\n      return entity.character;\r\n    }\r\n  });\r\n}\r\nconst validActors = actors.filter(actor => actor != null);\r\n\r\nlet messageContent = 'pp = passive perception<br>';\r\n\r\n// roll for every actor\r\nfor (const selectedActor of validActors) {\r\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\r\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\r\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\r\n\r\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\r\n  const uniqueActor = {};\r\n  const caughtBy = canvas.tokens.placeables\r\n    .filter(token => !!token.actor)\r\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\r\n      if (uniqueActor[actor.name]) {\r\n        return false;\r\n      }\r\n      uniqueActor[actor.name] = true;\r\n      return true;\r\n    })\r\n    .filter(({ actor }) => {\r\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\r\n    })\r\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\r\n\r\n  if (!caughtBy.length) {\r\n    messageContent += 'Stealth successful!<br>';\r\n  } else {\r\n    messageContent += 'Stealth questionable:<br>';\r\n    caughtBy.map(({ actor }) => {\r\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\r\n    });\r\n  }\r\n}\r\n\r\n// create the message\r\nconst chatData = {\r\n  user: game.user._id,\r\n  speaker: game.user,\r\n  content: messageContent,\r\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\r\n};\r\nChatMessage.create(chatData, {});","author":"0zbqaPRKVgwkfgiZ","img":"systems/dnd5e/icons/skills/emerald_07.jpg","actorIds":[],"_id":"vHFEmOdFKee77tYH"}
{"name":"Change Token","permission":{"default":0,"sjKRDGo0jjcivYTL":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.3A761FnScCMkY0Kv"}},"scope":"global","command":"//Change this to the default image of your character.\nconst defaultImg = \"worlds/extinction_curse/Assets/Characters/char_Arabis_new.png\";\n\nlet doRender = true;\n\nif (token.data.img != defaultImg) {\n\tdoRender = false;\n\ttoken.update({\"img\": defaultImg});\n\ttoken.update({height: 1, width: 1});\n\tactor.update({'data.attributes.hp.temp': 0});\n}\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Animal Form`,\n  content: `\n    <div>Select an animal form. Make sure you have enough space! Token expands down and to the right.<div>\n    <hr/>\n    <form>\n      <div class=\"form-group\">\n        <label>Form:</label>\n        <select id=\"shape-type\" name=\"shape-type\">\n          <option value=\"ape\">Ape</option>\n          <option value=\"bear\">Bear</option>\n          <option value=\"bull\">X Bull X</option>\n          <option value=\"cat\">Cat</option>\n          <option value=\"deer\">X Deer X</option>\n          <option value=\"frog\">Frog</option>\n          <option value=\"shark\">Shark</option>\n          <option value=\"snake\">Snake</option>\n          <option value=\"wolf\">Wolf</option>\n        </select>\n\t\t\n        <label> Level:</label>\n        <select id=\"spell-level\" name=\"spell-level\">\n          <option value=\"2\">2</option>\n          <option value=\"3\">3</option>\n          <option value=\"4\">4</option>\n          <option value=\"5\">5</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Wild Shape`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        const {name} = token;\n        let form = html.find('[name=\"shape-type\"]')[0].value || \"ape\";\n        let spellLevel = parseInt(html.find('[name=\"spell-level\"]')[0].value) || 2;\n\t\t\n\t\tif (spellLevel == 2){\n\t\t\ttoken.update({height: 1, width: 1});\n\t\t\tactor.update({'data.attributes.hp.temp': 5});\n\t\t}\n\t\tif (spellLevel == 3){\n\t\t\ttoken.update({height: 1, width: 1});\n\t\t\tactor.update({'data.attributes.hp.temp': 10});\n\t\t}\n\t\tif (spellLevel == 4){\n\t\t\ttoken.update({height: 2, width: 2});\n\t\t\tactor.update({'data.attributes.hp.temp': 15});\n\t\t}\n\t\tif (spellLevel == 5){\n\t\t\ttoken.update({height: 3, width: 3});\n\t\t\tactor.update({'data.attributes.hp.temp': 20});\n\t\t}\n\t//Change all these links to your animal form art assets\t\t\n        if (form === 'ape') {\n            token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Ape.png\"});\n        } \n        if (form === 'bear') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Bear.png\"});\n        }\n\t\tif (form === 'bull') {\n           token.update({\"img\": \"Extinction%20Curse/fantasy_bull.jpg\"});\n        }\n\t\tif (form === 'wolf') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Wolf.png\"});\n        }\n        if (form === 'cat') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Cat.png\"});\n        }\n        if (form === 'deer') {\n           token.update({\"img\": \"Extinction%20Curse/fantasy_deer.jpg\"});\n        }\n\t\tif (form === 'frog') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Frog.png\"});\n        }\n\t\tif (form === 'shark') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Shark.png\"});\n        }\n\t\tif (form === 'snake') {\n           token.update({\"img\": \"worlds/extinction_curse/Assets/Characters/Transformed Tokens/Arabis_Snake.png\"});\n        }\n      }\n    }\n  }\n}).render(doRender);","author":"sjKRDGo0jjcivYTL","img":"icons/svg/mystery-man-black.svg","actorIds":[],"_id":"vXcWruvYvLF6NnWM"}
